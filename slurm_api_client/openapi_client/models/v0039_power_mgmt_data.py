# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm DB.

    The version of the OpenAPI document: Slurm-23.11.4&openapi/dbv0.0.38&openapi/dbv0.0.39&openapi/v0.0.39&openapi/slurmctld&openapi/v0.0.38&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v0039_uint32_no_val import V0039Uint32NoVal
from typing import Optional, Set
from typing_extensions import Self

class V0039PowerMgmtData(BaseModel):
    """
    V0039PowerMgmtData
    """ # noqa: E501
    maximum_watts: Optional[V0039Uint32NoVal] = None
    current_watts: Optional[StrictInt] = None
    total_energy: Optional[StrictInt] = None
    new_maximum_watts: Optional[StrictInt] = None
    peak_watts: Optional[StrictInt] = None
    lowest_watts: Optional[StrictInt] = None
    new_job_time: Optional[StrictInt] = None
    state: Optional[StrictInt] = None
    time_start_day: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["maximum_watts", "current_watts", "total_energy", "new_maximum_watts", "peak_watts", "lowest_watts", "new_job_time", "state", "time_start_day"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V0039PowerMgmtData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maximum_watts
        if self.maximum_watts:
            _dict['maximum_watts'] = self.maximum_watts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V0039PowerMgmtData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maximum_watts": V0039Uint32NoVal.from_dict(obj["maximum_watts"]) if obj.get("maximum_watts") is not None else None,
            "current_watts": obj.get("current_watts"),
            "total_energy": obj.get("total_energy"),
            "new_maximum_watts": obj.get("new_maximum_watts"),
            "peak_watts": obj.get("peak_watts"),
            "lowest_watts": obj.get("lowest_watts"),
            "new_job_time": obj.get("new_job_time"),
            "state": obj.get("state"),
            "time_start_day": obj.get("time_start_day")
        })
        return _obj


