# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm DB.

    The version of the OpenAPI document: Slurm-23.11.4&openapi/dbv0.0.38&openapi/dbv0.0.39&openapi/v0.0.39&openapi/slurmctld&openapi/v0.0.38&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dbv0038_tres_list_inner import Dbv0038TresListInner
from typing import Optional, Set
from typing_extensions import Self

class Dbv0038QosLimitsMaxTresMinutesPer(BaseModel):
    """
    Max TRES minutes per settings
    """ # noqa: E501
    job: Optional[List[Dbv0038TresListInner]] = Field(default=None, description="TRES list of attributes")
    account: Optional[List[Dbv0038TresListInner]] = Field(default=None, description="TRES list of attributes")
    user: Optional[List[Dbv0038TresListInner]] = Field(default=None, description="TRES list of attributes")
    qos: Optional[List[Dbv0038TresListInner]] = Field(default=None, description="TRES list of attributes")
    __properties: ClassVar[List[str]] = ["job", "account", "user", "qos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dbv0038QosLimitsMaxTresMinutesPer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in job (list)
        _items = []
        if self.job:
            for _item_job in self.job:
                if _item_job:
                    _items.append(_item_job.to_dict())
            _dict['job'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account (list)
        _items = []
        if self.account:
            for _item_account in self.account:
                if _item_account:
                    _items.append(_item_account.to_dict())
            _dict['account'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user (list)
        _items = []
        if self.user:
            for _item_user in self.user:
                if _item_user:
                    _items.append(_item_user.to_dict())
            _dict['user'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in qos (list)
        _items = []
        if self.qos:
            for _item_qos in self.qos:
                if _item_qos:
                    _items.append(_item_qos.to_dict())
            _dict['qos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dbv0038QosLimitsMaxTresMinutesPer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job": [Dbv0038TresListInner.from_dict(_item) for _item in obj["job"]] if obj.get("job") is not None else None,
            "account": [Dbv0038TresListInner.from_dict(_item) for _item in obj["account"]] if obj.get("account") is not None else None,
            "user": [Dbv0038TresListInner.from_dict(_item) for _item in obj["user"]] if obj.get("user") is not None else None,
            "qos": [Dbv0038TresListInner.from_dict(_item) for _item in obj["qos"]] if obj.get("qos") is not None else None
        })
        return _obj


