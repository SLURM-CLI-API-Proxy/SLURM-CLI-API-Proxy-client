# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm DB.

    The version of the OpenAPI document: Slurm-23.11.4&openapi/dbv0.0.38&openapi/dbv0.0.39&openapi/v0.0.39&openapi/slurmctld&openapi/v0.0.38&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dbv0038_association_default import Dbv0038AssociationDefault
from openapi_client.models.dbv0038_association_max import Dbv0038AssociationMax
from openapi_client.models.dbv0038_association_min import Dbv0038AssociationMin
from openapi_client.models.dbv0038_association_usage import Dbv0038AssociationUsage
from typing import Optional, Set
from typing_extensions import Self

class Dbv0038Association(BaseModel):
    """
    Association description
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="Assigned account")
    cluster: Optional[StrictStr] = Field(default=None, description="Assigned cluster")
    default: Optional[Dbv0038AssociationDefault] = None
    flags: Optional[List[StrictStr]] = Field(default=None, description="List of properties of association")
    max: Optional[Dbv0038AssociationMax] = None
    min: Optional[Dbv0038AssociationMin] = None
    parent_account: Optional[StrictStr] = Field(default=None, description="Parent account name")
    partition: Optional[StrictStr] = Field(default=None, description="Assigned partition")
    priority: Optional[StrictInt] = Field(default=None, description="Assigned priority")
    shares_raw: Optional[StrictInt] = Field(default=None, description="Raw fairshare shares")
    usage: Optional[Dbv0038AssociationUsage] = None
    user: Optional[StrictStr] = Field(default=None, description="Assigned user")
    qos: Optional[List[StrictStr]] = Field(default=None, description="Assigned QOS", alias="QOS")
    __properties: ClassVar[List[str]] = ["account", "cluster", "default", "flags", "max", "min", "parent_account", "partition", "priority", "shares_raw", "usage", "user", "QOS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dbv0038Association from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max
        if self.max:
            _dict['max'] = self.max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min
        if self.min:
            _dict['min'] = self.min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dbv0038Association from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "cluster": obj.get("cluster"),
            "default": Dbv0038AssociationDefault.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "flags": obj.get("flags"),
            "max": Dbv0038AssociationMax.from_dict(obj["max"]) if obj.get("max") is not None else None,
            "min": Dbv0038AssociationMin.from_dict(obj["min"]) if obj.get("min") is not None else None,
            "parent_account": obj.get("parent_account"),
            "partition": obj.get("partition"),
            "priority": obj.get("priority"),
            "shares_raw": obj.get("shares_raw"),
            "usage": Dbv0038AssociationUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "user": obj.get("user"),
            "QOS": obj.get("QOS")
        })
        return _obj


