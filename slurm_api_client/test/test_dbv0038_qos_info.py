# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm DB.

    The version of the OpenAPI document: Slurm-23.11.4&openapi/dbv0.0.38&openapi/dbv0.0.39&openapi/v0.0.39&openapi/slurmctld&openapi/v0.0.38&openapi/slurmdbd
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dbv0038_qos_info import Dbv0038QosInfo

class TestDbv0038QosInfo(unittest.TestCase):
    """Dbv0038QosInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dbv0038QosInfo:
        """Test Dbv0038QosInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dbv0038QosInfo`
        """
        model = Dbv0038QosInfo()
        if include_optional:
            return Dbv0038QosInfo(
                meta = openapi_client.models.dbv0/0/38_meta.dbv0.0.38_meta(
                    plugin = openapi_client.models.dbv0_0_38_meta_plugin.dbv0_0_38_meta_plugin(
                        type = '', 
                        name = '', ), 
                    slurm = openapi_client.models.dbv0_0_38_meta_slurm.dbv0_0_38_meta_Slurm(
                        version = openapi_client.models.dbv0_0_38_meta_slurm_version.dbv0_0_38_meta_Slurm_version(
                            major = '', 
                            micro = '', 
                            minor = '', ), 
                        release = '', ), ),
                errors = [
                    openapi_client.models.dbv0/0/38_error.dbv0.0.38_error(
                        error_number = 56, 
                        error = '', 
                        source = '', 
                        description = '', )
                    ],
                qos = [
                    openapi_client.models.dbv0/0/38_qos.dbv0.0.38_qos(
                        description = '', 
                        flags = [
                            ''
                            ], 
                        id = '', 
                        limits = openapi_client.models.dbv0_0_38_qos_limits.dbv0_0_38_qos_limits(
                            factor = 1.337, 
                            max = openapi_client.models.dbv0_0_38_qos_limits_max.dbv0_0_38_qos_limits_max(
                                wall_clock = openapi_client.models.dbv0_0_38_qos_limits_max_wall_clock.dbv0_0_38_qos_limits_max_wall_clock(
                                    per = openapi_client.models.dbv0_0_38_qos_limits_max_wall_clock_per.dbv0_0_38_qos_limits_max_wall_clock_per(
                                        qos = 56, 
                                        job = 56, ), ), 
                                jobs = openapi_client.models.dbv0_0_38_qos_limits_max_jobs.dbv0_0_38_qos_limits_max_jobs(
                                    active_jobs = openapi_client.models.dbv0_0_38_qos_limits_max_jobs_active_jobs.dbv0_0_38_qos_limits_max_jobs_active_jobs(), ), 
                                accruing = openapi_client.models.dbv0_0_38_qos_limits_max_accruing.dbv0_0_38_qos_limits_max_accruing(), 
                                tres = openapi_client.models.dbv0_0_38_qos_limits_max_tres.dbv0_0_38_qos_limits_max_tres(
                                    minutes = openapi_client.models.dbv0_0_38_qos_limits_max_tres_minutes.dbv0_0_38_qos_limits_max_tres_minutes(), ), ), 
                            min = openapi_client.models.dbv0_0_38_qos_limits_min.dbv0_0_38_qos_limits_min(
                                priority_threshold = 56, ), ), 
                        preempt = openapi_client.models.dbv0_0_38_qos_preempt.dbv0_0_38_qos_preempt(
                            list = [
                                ''
                                ], 
                            mode = [
                                ''
                                ], 
                            exempt_time = 56, ), 
                        priority = 56, 
                        usage_factor = 1.337, 
                        usage_threshold = 1.337, 
                        name = '', )
                    ]
            )
        else:
            return Dbv0038QosInfo(
        )
        """

    def testDbv0038QosInfo(self):
        """Test Dbv0038QosInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
